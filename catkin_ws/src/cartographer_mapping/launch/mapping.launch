<launch>
		<!-- Load robot description and start state publisher-->
    <param name="robot_description" textfile="$(find cartographer_mapping)/urdf/head_2d.urdf" />

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
		
		<!-- Start Delta2a lidar sensor node which provides LaserScan data  -->
    <node name="delta_lidar_node" pkg="delta_2a_lidar" type="delta_lidar_node" output="screen">
        <param name="serial_port" type="string" value="/dev/ttyUSB0"/>
        <!-- <param name="serial_baudrate" type="int" value="115200"/> -->
        <param name="frame_id" type="string" value="laser"/>
        <!-- <param name="inverted" type="bool" value="false"/> -->
        <!-- <param name="angle_compensate" type="bool" value="true"/> -->
    </node>

    <!--### static transform between base_link and laser frame -->
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.0 0.0 0.10 0.0 0.0 0.0 /base_link /laser 100" />

    <!-- Laser odometry -->
    <include file="$(find rf2o_laser_odometry)/launch/rf2o_laser_odometry.launch" />

	<!-- Start Google Cartographer node with custom configuration file-->
    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
          -configuration_directory
              $(find cartographer_mapping)/configuration_files
          -configuration_basename lidar_mapping.lua" output="screen">
    </node>

		<!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" />
    
</launch>
